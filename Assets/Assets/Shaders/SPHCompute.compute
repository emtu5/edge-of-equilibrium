#pragma kernel Integrate
#pragma kernel ComputeForces
#pragma kernel ComputeDensityPressure
#pragma kernel HashParticles
#pragma kernel BitonicSort
#pragma kernel CalculateOffsets

struct Particle
{
    // total: 44 bytes
    float pressure; // 4 bytes
    float density; // 4 bytes
    float3 currentForce; // 12 bytes
    float3 velocity; // 12 bytes
    float3 position; // 12 bytes
};

RWStructuredBuffer<Particle> _particles;
RWByteAddressBuffer _sphereForce;
RWStructuredBuffer<uint> _particleIndices;
RWStructuredBuffer<uint> _particleCellIndices;
RWStructuredBuffer<uint> _cellOffsets;

float particleMass, gasConstant, restingDensity, viscosity, radius1, radius2, radius3, radius4, radius5, boundDamping, gravity, pi;
uint particleLength;
float timestep;
float3 boxSize;

float3 boxCenter;
float3 spherePos;
float sphereRadius;
float3 sphereForces;

int block;
int dimension;

[numthreads(256, 1, 1)]
void Integrate(uint3 id : SV_DispatchThreadID)
{
    //_particles[id.x].currentForce = float3(0, gravity * particleMass, 0);
    
    float3 velocity = _particles[id.x].velocity + ((_particles[id.x].currentForce / particleMass) * timestep);
    _particles[id.x].position += velocity * timestep;
    
    float3 topRight = boxSize / 2;
    float3 bottomLeft = boxSize / -2;
    
    // keeping particles inside bounds
    if (_particles[id.x].position.x - radius1 < bottomLeft.x)
    {
        velocity.x *= boundDamping;
        _particles[id.x].position.x = bottomLeft.x + radius1;
    }
    if (_particles[id.x].position.y - radius1 < bottomLeft.y)
    {
        velocity.y *= boundDamping;
        _particles[id.x].position.y = bottomLeft.y + radius1;
    }
    if (_particles[id.x].position.z - radius1 < bottomLeft.z)
    {
        velocity.z *= boundDamping;
        _particles[id.x].position.z = bottomLeft.z + radius1;
    }
    
    if (_particles[id.x].position.x + radius1 > topRight.x)
    {
        velocity.x *= boundDamping;
        _particles[id.x].position.x = topRight.x - radius1;
    }
    if (_particles[id.x].position.y + radius1 > topRight.y)
    {
        velocity.y *= boundDamping;
        _particles[id.x].position.y = topRight.y - radius1;
    }
    if (_particles[id.x].position.z + radius1 > topRight.z)
    {
        velocity.z *= boundDamping;
        _particles[id.x].position.z = topRight.z - radius1;
    }
    
    _particles[id.x].velocity = velocity;
}

int3 GetCell(float3 position)
{
    float3 halfSize = boxSize / 2;
    return int3(
        (int) ((position.x + halfSize.x) / radius1),
        (int) ((position.y + halfSize.y) / radius1),
        (int) ((position.z + halfSize.z) / radius1)
    );
}

uint HashCell(int3 cellIndex)
{
    uint prime1 = 54762209;
    uint prime2 = 60908101;
    uint prime3 = 28905691;
    
    int n = prime1 * cellIndex.x ^ prime2 * cellIndex.y ^ prime3 * cellIndex.z;
    n = n % particleLength;
    
    return n;
}

[numthreads(256, 1, 1)]
void HashParticles(uint3 id : SV_DispatchThreadID)
{
    _cellOffsets[id.x] = 100000000;
    uint particleIndex = _particleIndices[id.x];
    _particleCellIndices[particleIndex] = HashCell(GetCell(_particles[particleIndex].position));
}

[numthreads(256, 1, 1)]
void BitonicSort(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x + id.y * 256 * 1024;
    uint j = i ^ block;
    
    if (j < i || i >= particleLength)
    {
        return;
    }
        
    uint keyi = _particleIndices[i];
    uint keyj = _particleIndices[j];
    float valuei = _particleCellIndices[keyi];
    float valuej = _particleCellIndices[keyj];
    
    float diff = ((i & dimension) == 0 ? 1 : -1);
    diff = diff * (valuei - valuej);
    if (diff > 0)
    {
        _particleIndices[i] = keyj;
        _particleIndices[j] = keyi;
    }
}

[numthreads(256, 1, 1)]
void CalculateOffsets(uint3 id : SV_DispatchThreadID)
{
    uint particleIndex = _particleIndices[id.x];
    uint cellIndex = _particleCellIndices[particleIndex];
    
    InterlockedMin(_cellOffsets[cellIndex], id.x);
}

float SpikyKernelFirstDerivative(float distance)
{
    float x = 1.0f - distance / radius1;
    return -45.f / (pi * radius4) * x * x;
}

float SpikyKernelSecondDerivative(float distance)
{
    float x = 1.0f - distance / radius1;
    return 90.f / (pi * radius5) * x;
}

float3 SpikyKernelGradient(float distance, float3 direction)
{
    return SpikyKernelFirstDerivative(distance) * direction;
}

void InterlockedAddFloat(RWByteAddressBuffer buf, uint offset, float value)
{
    uint i_val = asuint(value);
    uint tmp0 = 0;
    uint tmp1;
    while (true)
    {
        buf.InterlockedCompareExchange(offset, tmp0, i_val, tmp1);
        if (tmp1 == tmp0)  
            break;
        tmp0 = tmp1;
        i_val = asuint(value + asfloat(tmp1));
    }
}

[numthreads(256, 1, 1)]
void ComputeForces(uint3 id : SV_DispatchThreadID)
{
    uint particleIndex = _particleIndices[id.x];
    int3 cellIndex = GetCell(_particles[particleIndex].position);
    
    float3 origin = _particles[particleIndex].position;
    float density2 = _particles[particleIndex].density * _particles[particleIndex].density;
    float mass2 = particleMass * particleMass;
    float3 pressure = float3(0, 0, 0);
    float3 viscosityForce = float3(0, 0, 0);
    
    for (int i = -2; i <= 2; ++i)
    {
        for (int j = -2; j <= 2; ++j)
        {
            for (int k = -2; k <= 2; ++k)
            {
                int3 neighborCellIndex = cellIndex + int3(i, j, k);
                uint neighborCellHash = HashCell(neighborCellIndex);
                uint neighborIterator = _cellOffsets[neighborCellHash];
                
                while (neighborIterator != 100000000 && particleLength > neighborIterator)
                {
                    uint neighborParticleIndex = _particleIndices[neighborIterator];
                    if (_particleCellIndices[neighborParticleIndex] != neighborCellHash)
                    {
                        break;
                    }
                    
                    Particle neighborParticle = _particles[neighborParticleIndex];
                    
                    if (origin.x == neighborParticle.position.x &&
                        origin.y == neighborParticle.position.y &&
                        origin.z == neighborParticle.position.z)
                    {
                        neighborIterator++;
                        continue;
                    }
                    
                    float dist = distance(neighborParticle.position, origin);
                    if (dist < radius1 * 2)
                    {
                        float3 pressureGradientDirection = normalize(_particles[particleIndex].position - _particles[neighborParticleIndex].position);
                        float3 _pressureContribution = mass2 * SpikyKernelGradient(dist, pressureGradientDirection);
                        _pressureContribution *= (_particles[particleIndex].pressure / density2
                        + _particles[neighborParticleIndex].pressure / (_particles[neighborParticleIndex].density * _particles[neighborParticleIndex].density));
                        float3 _viscostyContribution = viscosity * mass2 * (_particles[neighborParticleIndex].velocity - _particles[particleIndex].velocity)
                        / _particles[neighborParticleIndex].density;
                        _viscostyContribution *= SpikyKernelSecondDerivative(dist);
                        pressure += _pressureContribution;
                        viscosityForce += _viscostyContribution;
                    }
                    
                    neighborIterator++;
                }
            }
        }
    }
    
    _particles[particleIndex].currentForce = float3(0, gravity * particleMass, 0) - pressure + viscosityForce;
	//_particles[particleIndex].currentForce = float3(0,0,0);
	
    float3 collisionDirection = _particles[particleIndex].position - spherePos;
	if (length(collisionDirection) < sphereRadius)
	{
        float3 contrib = collisionDirection * 21;
        InterlockedAddFloat(_sphereForce, 0, -contrib.x * 0.8);
        InterlockedAddFloat(_sphereForce, 4, -contrib.y + 2);
        InterlockedAddFloat(_sphereForce, 8, -contrib.z * 0.8);
        // _particles[particleIndex].currentForce += contrib;   
        _particles[particleIndex].currentForce += collisionDirection * 400;
    }
}

float StdKernel(float distanceSquared)
{
    float x = 1.0f - distanceSquared / radius2;
    return 315.0f / (64.0f * pi * radius3) * x * x * x;
}

[numthreads(256, 1, 1)]
void ComputeDensityPressure(uint3 id : SV_DispatchThreadID)
{
    uint particleIndex = _particleIndices[id.x];
    int3 cellIndex = GetCell(_particles[particleIndex].position);
    
    float3 origin = _particles[particleIndex].position;
    float sum = 0;
    
    for (int i = -2; i <= 2; ++i)
    {
        for (int j = -2; j <= 2; ++j)
        {
            for (int k = -2; k <= 2; ++k)
            {
                int3 neighborCellIndex = cellIndex + int3(i, j, k);
                uint neighborCellHash = HashCell(neighborCellIndex);
                uint neighborIterator = _cellOffsets[neighborCellHash];
                
                while (neighborIterator != 100000000 && particleLength > neighborIterator)
                {
                    uint neighborParticleIndex = _particleIndices[neighborIterator];
                    if (_particleCellIndices[neighborParticleIndex] != neighborCellHash)
                    {
                        break;
                    }
                    
                    Particle neighborParticle = _particles[neighborParticleIndex];
                    
                    float3 diff = origin - _particles[neighborParticleIndex].position;
                    float distanceSquared = dot(diff, diff);
                    
                    if (radius2 * 0.004 > distanceSquared * 0.004)
                    {
                        sum += StdKernel(distanceSquared * 0.004);
                    }
                    
                    neighborIterator++;
                }

            }
        }
    }
    
    _particles[particleIndex].density = sum * particleMass + 0.000001f;
    _particles[particleIndex].pressure = gasConstant * (_particles[particleIndex].density - restingDensity);
}